@page "/list-questions"
@attribute [Authorize]

@using QuizDesigner.Application
@inherits ListQuestionsBase

<div class="quiz-div">
    <DataGrid TItem="QuestionViewModel"
              UseValidation="true"
              Hoverable="true"
              Data="@QuestionViewModelCollection"
              ReadData="@OnReadData"
              TotalItems="@TotalQuestions"
              ShowPager="true"
              PageSize="10"
              Filterable="true"
              FilterMethod="DataGridFilterMethod.Contains"
              Editable="true"
              EditMode="DataGridEditMode.Inline"
              RowInserted="this.OnRowInserted"
              RowUpdated="this.OnRowUpdated"
              RowRemoved="this.OnRowRemoved">
        <ChildContent>
            <DataGridCommandColumn TItem="QuestionViewModel" />
            <DataGridColumn TItem="QuestionViewModel" Field="@nameof(QuestionViewModel.Text)" Caption="Text" Editable="true">
                <DisplayTemplate>
                    <Condition Evaluation="context.HasAnswers">
                        <Match>
                            @context.Text
                        </Match>
                        <NotMatch>
                            <Tooltip Text="This question has no answers.">
                                <Text TextColor="TextColor.Danger">
                                    @context.Text
                                </Text>
                            </Tooltip>
                        </NotMatch>
                    </Condition>
                </DisplayTemplate>
                <EditTemplate>
                    <MemoEdit Rows="5" Text="@((string)context.CellValue)" TextChanged="@(t => context.CellValue = t)"/>
                </EditTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="QuestionViewModel" Field="@nameof(QuestionViewModel.Tag)" Caption="Tag" Editable="true" />
            <DataGridSelectColumn TItem="QuestionViewModel" Field="@nameof(QuestionViewModel.Difficulty)" Caption="Difficulty" Editable="true" Filterable="false">
                <EditTemplate>
                    <Select TValue="DifficultyType" SelectedValue="@((DifficultyType)context.CellValue)" SelectedValueChanged="value =>  context.CellValue = value">
                        <SelectItem TValue="DifficultyType" Value="@(DifficultyType.Easy)">Easy</SelectItem>
                        <SelectItem TValue="DifficultyType" Value="@(DifficultyType.Medium)">Medium</SelectItem>
                        <SelectItem TValue="DifficultyType" Value="@(DifficultyType.Hard)">Hard</SelectItem>
                        <SelectItem TValue="DifficultyType" Value="@(DifficultyType.Max)">Max</SelectItem>
                    </Select>
                </EditTemplate>
            </DataGridSelectColumn>
            <DataGridColumn TItem="QuestionViewModel" Field="@nameof(QuestionViewModel.Id)" Editable="false" Filterable="false">
                <DisplayTemplate>
                    <Condition Evaluation="context.Id == Guid.Empty">
                        <NotMatch>
                            <Button Color="Color.Info" Clicked="() => this.OnAnswersButtonClickedAsync(context.Id)">Answers</Button>
                        </NotMatch>
                    </Condition>
                </DisplayTemplate>
            </DataGridColumn>
        </ChildContent>
        <EmptyTemplate>
            <p>No questions are found!</p>
        </EmptyTemplate>
    </DataGrid>
    <AnswersModal @ref="AnswersModal" OnAnswersSet="RefreshQuestion" />
</div>